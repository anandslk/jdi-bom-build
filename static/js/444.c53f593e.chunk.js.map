{"version":3,"file":"static/js/444.c53f593e.chunk.js","mappings":"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","sources":["components/Modal/customModal.jsx","components/Popup/Popup.jsx","hooks/usePlantDropableArea.js","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction ,setLoading} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default usePlantDropableArea;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (asignedPlant) => {\r\n  if (!asignedPlant) return [];\r\n  return asignedPlant.map((plant) => ({\r\n    Plant: plant?.title || \"N/A\",\r\n    Seq: plant?.Seq || \"1\",\r\n    Status: \"Current\" || \"N/A\",\r\n    \"MFG Change\": plant?.MFGChange || \"N/A\",\r\n    \"MFG Status\": plant?.MFGStatus || \"N/A\",\r\n    Change: plant?.Change || \"N/A\",\r\n    \"Change Status\": plant?.ChangeStatus || \"N/A\",\r\n    \"Oracle Template\": plant.OracleTemplate || \"N/A\",\r\n    \"ERP Status\": \"Active\" || \"N/A\",\r\n    \"ERP Export\": \"Yes\" || \"N/A\",\r\n    \"Lead Plant\": false,\r\n    MBom: plant.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n    \"Sort Value\": \"\",\r\n  }));\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName) => [\r\n  { accessorKey: \"Plant\", header: \"Plant\" },\r\n  { accessorKey: \"Seq\", header: \"Seq\" },\r\n  {\r\n    accessorKey: \"MBom\",\r\n    header: \"MBom\",\r\n    cell: ({ row, getValue, table }) => {\r\n      const handleDropdownChange = (e) => {\r\n        if (!CAName) return; // Prevent changes when disabled\r\n        const updatedValue = e.target.value;\r\n\r\n        // Update the table data state here\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n      };\r\n\r\n      return (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          disabled={!CAName} // Disable dropdown if CAName is false\r\n          className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n          style={{\r\n            ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n            width: \"70%\",\r\n            padding: \"5px\",\r\n            fontSize: \"14px\",\r\n            color: \"#333\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => {\r\n            if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n          }}\r\n          onMouseOut={(e) => {\r\n            if (CAName) e.target.style.border = \"none\";\r\n          }}\r\n        >\r\n          <option value=\"Make\">Make</option>\r\n          <option value=\"Buy\">Buy</option>\r\n        </select>\r\n      );\r\n    },\r\n  },\r\n  { accessorKey: \"Status\", header: \"Status\" },\r\n  { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n  { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n  { accessorKey: \"Change\", header: \"Change\" },\r\n  { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n  { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n  { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n  { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n  { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n\r\n  { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n];\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [AddedItem, setAddedItem] = useState([]);\r\n  const [addedItemData, setAddedItemData] = useState([]);\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && CAName) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to update pLANTS, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to update, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  // useEffect(() => {\r\n  //   onAddPlant(addedItemData);\r\n  //   console.log(\"Data Passed\");\r\n  //   // addedPlant(AddedItem);\r\n  // }, [addedItemData]);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    setAddedItem(data);\r\n    if (data.length > 0) {\r\n      const newItems = data.map((title) => ({\r\n        title: title, // Use the title as Plant (or replace with actual data)\r\n        Seq: \"1\",\r\n        Status: \"Current\",\r\n        \"MFG Change\": \"N/A\",\r\n        \"MFG Status\": \"N/A\",\r\n        Change: \"N/A\",\r\n        \"Change Status\": \"N/A\",\r\n        \"Oracle Template\": \"N/A\",\r\n        \"ERP Status\": \"Active\",\r\n        \"ERP Export\": \"Yes\",\r\n        \"Lead Plant\": \"false\",\r\n        MBom: \"Buy\",\r\n        \"Sort Value\": \"\",\r\n      }));\r\n      onAddPlant(newItems);\r\n      setAddedItemData(newItems);\r\n      addedPlant(data);\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   // if (AddedItem.length > 0) {\r\n  //   //   const newItems = AddedItem.map((title) => ({\r\n  //   //     title: title, // Use the title as Plant (or replace with actual data)\r\n  //   //     Seq: \"1\",\r\n  //   //     Status: \"Current\",\r\n  //   //     MFG_Change: \"\",\r\n  //   //     MFG_Status: \"\",\r\n  //   //     Change: \"\",\r\n  //   //     Change_Status: \"\",\r\n  //   //     Oracle_Template: \"\",\r\n  //   //     \"ERP Status\": \"Active\",\r\n  //   //     \"ERP Export\": \"Yes\",\r\n  //   //     \"Lead Plant\": \"false\",\r\n  //   //     MBom: \"Buy\",\r\n  //   //     \"Sort Value\": \"\",\r\n  //   //   }));\r\n  //   //   onAddPlant(newItems);\r\n  //   //   setAddedItemData(newItems);\r\n  //   //   addedPlant(AddedItem);\r\n  //   // }\r\n  // }, [AddedItem]);\r\n\r\n  console.log(\"Added item data:\", addedItemData);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={() => {\r\n            if (CAName) {\r\n              setAddPlantPopup(true); // Open the modal if CAName is present\r\n            } else if (state === \"RELEASED\") {\r\n              showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n            } else {\r\n              showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n            }\r\n          }}\r\n        >\r\n          Add Plant\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleSaveClick}\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      </div>\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata}\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport { clearAllListeners } from \"@reduxjs/toolkit\";\r\nimport { faClipboardQuestion } from \"@fortawesome/free-solid-svg-icons\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [addedDataFromToolbar, setAddedDataFromToolbar] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n\r\n    setScreenLoader(true);\r\n    await onSave(tableData); // Pass tableData when calling onSave\r\n  };\r\n  const handleRemove = async () => {\r\n    console.log(\"Selected Table Rows:\", selectedTableRows);\r\n    console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n    if (selectedTableRows.length > 0) {\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n\r\n      // // Filter out selected rows from assignedPlant and update tableData\r\n      // const updatedAssignedPlant = assignedPlant.filter(\r\n      //   (row) => !selectedTitles.includes(row.title)\r\n      // );\r\n      // console.log(\"Updated Assigned Plant:\", updatedAssignedPlant);\r\n\r\n      // Extract filtered-out rows to add them back to uniqueData\r\n      // const removedPlants = assignedPlant.filter((row) =>\r\n      //   selectedTitles.includes(row.title)\r\n      // );\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n      // // setAssignedPlant(updatedAssignedPlant); // Updated tableData\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n    } else {\r\n      alert(\"Please select at least one row to remove.\");\r\n    }\r\n  };\r\n\r\n  const handleAdded = (data) => {\r\n    console.log(\"Data Received\");\r\n    setAddedDataFromToolbar(data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    setTableData((prev) => [\r\n      ...data.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n      ...prev,\r\n    ]);\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  };\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n  useEffect(() => {\r\n    setUniqueData(uniquePlant);\r\n  }, [uniquePlant]);\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData.objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    setAssignedPlant(asignedPlant);\r\n  }, [asignedPlant]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(\r\n    () => getTableData(assignedPlant),\r\n    [assignedPlant]\r\n  );\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // useEffect(() => {\r\n  //   if (addedDataFromToolbar.length > 0) {\r\n  //     console.log(\"[Plant Assignment] Table data\", tableData);\r\n  //     console.log(\"Added Data from Toolbar\", addedDataFromToolbar);\r\n  //     setAssignedPlant((prev) => [...addedDataFromToolbar, ...prev]);\r\n  //     setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  //   }\r\n  // }, [addedDataFromToolbar]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(() => tableColumns(CAName), [CAName]);\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  data={tableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const fetchData = async (\r\n      url,\r\n      body = null,\r\n      method = \"GET\"\r\n      // headers = {}\r\n    ) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Method is:\");\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      try {\r\n        const response = await axios({\r\n          url,\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: body, // Include body only if provided\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(\"Request failed:\", error);\r\n        throw error; // Propagate the error to the caller\r\n      }\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        return !change;\r\n      }\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n\r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n\r\n      const patchUrl = `https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(patchUrl, updateBody, \"PATCH\");\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n\r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        declassifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n"],"names":["_ref","show","onHide","title","children","footerButtons","_jsxs","Modal","size","centered","_jsx","Header","closeButton","Title","Body","Footer","map","btn","index","Button","variant","onClick","label","forwardRef","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","length","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","id","cell","_ref2","row","type","className","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","_Fragment","getRowModel","forEach","toggleSelected","style","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","usePlantDropableArea","showErrorToast","handlePlantAssignment","usePlantAssignment","isDropped","useSelector","droppedObject","loading","dispatch","useDispatch","fetchObjectDetails","useCallback","async","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","console","log","setIsDroppedAction","objectId","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","error","setLoading","handleDrop","_dataItems$3","includes","MSG_INVALID_OBJECT_TYPE","setTimeout","warn","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","uniqueColumns","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","AddedItem","setAddedItem","addedItemData","setAddedItemData","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","CustomModal","_availablePlantRef$cu","current","AvailablePlant","newItems","Seq","Status","Change","MBom","DragAndDropComponent","performSearch","useInterComSearch","Image","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","PlantAssignment","tableKey","setTableKey","tableData","setTableData","assignedPlant","setAssignedPlant","uniqueData","setUniqueData","addedDataFromToolbar","setAddedDataFromToolbar","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","selectedTableRows","loadingParentDetails","proposedChanges","plantObjectData","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","headers","updateTableData","updatedData","prevKey","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in","_droppedObjectData$in2","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","_objectSpread","tableItem","_allPlants$find","finalObj","plantName","Plant","replace","classid","find","classitem","MBOM","test","concat","MBOMName","MBOMValue","Type","push","initialClass","_allPlants$find2","classObject","rowstoDelete","_allPlants$find3","classItem","filter","result","saveData","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","cursor","position","paddingRight","handleCopy","textToCopy","join","navigator","clipboard","writeText","right","top","background","border","fontSize","color","FaRegCopy","formattedFinalMessage","autoClose","closeOnClick","finalobj","ErrorObj","Object","keys","response","errorObj","plant","processErrorObj","MSG_SAVE_FAILURE","newTableData","MFGChange","MFGStatus","ChangeStatus","OracleTemplate","getTableData","uniqueTableData","getUniqueTableData","owner","Owner","Description","imageURL","EIN","getCardData","getValue","value","e","_table$options$meta","updatedValue","target","r","options","meta","disabled","appearance","padding","textAlign","onMouseOver","onMouseOut","tableColumns","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","CardWithDragAndDrop","PlantAssignmentToolbarNativeCta","prev","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","selectedTitles","removedTitles","prevUniquePlants","alert","ReusableTable","widgetType","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","initialAssignedClasses","productId","AllClasses","productChilds","ENOVIA_BASE_URL","process","REACT_APP_ENOVIA_BASE_URL","WAFData","loadWAFData","fetchOOTBData","url","method","JSON","stringify","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","fetchData","arguments","undefined","axios","NotPropagableChilds","prodChild","toLowerCase","change","identifier","action","prodchilds","notPropagableChild","classes","childId","childName","name","childs","message","Array","isArray","every","child","childTitles","newClasses","errorItem","updateBody","propagateClasses","classifyUrl","classifybody","classifyResponse","_response$member$","nextApiUrl","cestamp","member","patchUrl","childclassifyResponse","declassifyUrl","declassifyResponse"],"sourceRoot":""}