{"version":3,"file":"static/js/708.6706ee66.chunk.js","mappings":"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","sources":["components/Loader/Loader.js","components/SearchInput/SearchInput.jsx","hooks/useDroppableArea.js","hooks/useInterComSearch.js","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/searchCAService.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/CADetailService.js","hooks/useRevisions.js","hooks/useToast.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/refreshService.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction, setLoading } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useDroppableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Fetch Revisions and Parents in parallel\r\n          const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n          const [revisionParentData] = await Promise.all([\r\n            fetchRevisionsAndParents(\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              relativePath\r\n            ),\r\n          ]);\r\n          // Dispatch all updates together (batching updates)\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n              parentDetails: revisionParentData || [],\r\n            })\r\n          );\r\n          console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\nimport {\r\n  setCAName,\r\n  setHeaders,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // HERE IS THE iSSUE THAT THIS FUNCTION IS ALWAYS CALLED .\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  // const securityContext1 = initWidget.getValue(\"Credentials\");\r\n  // console.log(\"Srcurity Context in usePlantAssignment:\", securityContext1);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true));\r\n      const headers = await fetchCsrfToken();\r\n      // Step 1: Call Initial Service\r\n      if (headers) {\r\n        console.log(\"[UsePlantAssignment] Headers are\", headers);\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 3: Pass Combined Data to Additional Service\r\n        if (allCollabSpaces) {\r\n          const allPlants = await getAllPlants(\r\n            allCollabSpaces,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment] All Plants are:\", allPlants);\r\n\r\n          if (allPlants) {\r\n            const plants = await fetchAssignedPlants(\r\n              allPlants,\r\n              headers,\r\n              objectId\r\n            );\r\n\r\n            console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n            // to dispatch the plants\r\n            if (plants.success) {\r\n              dispatch(setPlantObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            } else {\r\n              console.error(\"Failed to fetch plant data\");\r\n            }\r\n          } else {\r\n            console.warn(\"[Use All Plants] There are no Plants\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use All Plants] There are no CollabSpace\");\r\n        }\r\n\r\n        // Step 4: Call Remaining Independent Services\r\n        let getProductChildren = {};\r\n        console.log(\"Type Before:\", type);\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = {\r\n            success: true,\r\n            data: [],\r\n          };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          ); // type we need here\r\n        }\r\n        console.log(\"Type After:\", type);\r\n        console.log(\"[Use All Plants] Product Childrens\", getProductChildren);\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use All Plants] Get CA Details\", getCaDetails);\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n        }\r\n\r\n        // Step 5: Dispatch Results to Redux\r\n\r\n        // hERE WE CAN ADD TOAST\r\n        console.log(\"[Plant Assignment] All Services Executed Successfully\");\r\n\r\n        return;\r\n      } else {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      dispatch(setParentDetailsLoading(false));\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // End loading at the top level\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return SearchCA(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n\r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n\r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n\r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n\r\n            if (status !== \"Complete\") {\r\n              let url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n\r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n\r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n\r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n\r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n\r\n    throw error;\r\n  }\r\n};\r\n","import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n"],"names":["Loader","_jsx","className","children","_ref","onSearch","disabled","searchText","setSearchText","useState","inputRef","useRef","_jsxs","FontAwesomeIcon","icon","faMagnifyingGlass","onClick","handleSearchIconClick","trim","InputGroup","Form","Control","type","ref","value","onChange","event","newSearchText","target","onKeyDown","key","placeholder","Button","variant","handleClearClick","current","focus","useDroppableArea","showErrorToast","useToast","fetchRevisionsAndParents","useRevisions","dispatch","useDispatch","isDropped","useSelector","state","droppedObject","loading","fetchObjectDetails","useCallback","async","objectDetailsResult","getDroppedObjectDetails","dataItems","success","_dataItems$","_dataItems$2","relativePath","data","cardData","revisionParentData","Promise","all","objectId","objectType","setDroppedObjectData","parentDetails","console","log","MSG_FETCH_OBJECT_DETAILS_FAILED","error","setLoading","handleDrop","length","_dataItems$3","includes","MSG_INVALID_OBJECT_TYPE","setIsDroppedAction","setTimeout","warn","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","useInterComSearch","socket","setSocket","InterCom","setInterCom","useEffect","interComInstance","loadInterCom","loadData","disconnect","performSearch","searchOpts","onObjectsSelected","_window$widget","socketName","Date","toISOString","replace","newSocket","Socket","dispatchRetryInternal","subscribeServer","widgetId","window","widget","id","finalSearchOpts","_objectSpread","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","SearchCA","flowDownCA","headers","CADetails","CAAtt","ENOVIA_BASE_URL","process","REACT_APP_ENOVIA_BASE_URL","_searchResponse$chang","WAFData","loadWAFData","fetchData","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","urlObjWAF","concat","caID","changeAction","identifier","CAUrl","CAresponse","item","isFlowDownOf","parentCAUrl","parentCAResponse","push","CATitle","title","CAState","usePlantAssignment","email","getValue","handlePlantAssignment","collabSpace","setParentDetailsLoading","fetchCsrfToken","userGroupCollab","JSON","stringify","objectID","userGroup","userGroupBody","groups","results","forEach","result","sharings","userGroups","group","access","uri","userGroupID","grpUrl","grpresponse","filter","members","map","getUserGroupCollab","allCollabSpaces","allPlants","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","member","find","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","some","userClass","getAllPlants","plants","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","obj","promiseArray","Attributes","eachAttribute","name","then","flowDownCADetails","MCOTitle","MCOState","CA","slice","allClass","assigned","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","body","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","status","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChanges","proposedChange","where","action","whats","what","fetchCADetails","setCAName","setProposedChanges","MSG_FETCH_CSRF_HEADERS_FAILED","showSuccessToast","api","post","Error","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","MSG_REPLACE_SUCCESS","MSG_REPLACE_ERROR","message","showToast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","_objectWithoutProperties","_excluded","toast","options","arguments","undefined","showInfoToast","showWarningToast","securityContext1","csrfURL","REACT_APP_CSRF_URL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","refreshWidgetData"],"sourceRoot":""}