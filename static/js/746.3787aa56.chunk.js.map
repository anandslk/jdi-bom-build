{"version":3,"file":"static/js/746.3787aa56.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","components/Popup/Popup.jsx","hooks/useBOSWidget.js","hooks/useBOSDropableArea.js","pages/BOSWidget/MassUpdateDropdown.jsx","pages/BOSWidget/BOSWidgetToolbarNativeCta.jsx","pages/BOSWidget/BOSWidget.jsx","pages/BOSWidget/BOSdataHelpers.js","pages/BOSWidget/WidgetLifecycle.jsx","pages/BOSWidget/bosIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useBOSWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useBOSWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleBOSWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useBOSWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useBOSWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for only the matching document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n              if (item.versions.some((version) => version.id === doc.id)) {\r\n                return {\r\n                  ...doc,\r\n                  isLatestRevision:\r\n                    doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n                };\r\n              }\r\n              return doc;\r\n            });\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useBOSWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useBOSWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useBOSWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useBOSWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleBOSWidget };\r\n};\r\n\r\nexport default useBOSWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n\r\n  // const [csrfHeaders, setCsrfHeaders] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    dispatch(setIsDroppedAction(false));\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  // Temporary value options (Can be made dynamic later)\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <button\r\n        className=\"btn btn-outline-primary btn-lg m-2 dropdown-toggle\"\r\n        type=\"button\"\r\n        data-bs-toggle=\"dropdown\"\r\n      >\r\n        Mass Update\r\n      </button>\r\n      <div className=\"dropdown-menu p-3 \" style={{ width: \"300px\" }}>\r\n        <label>Select Column:</label>\r\n        <select\r\n          className=\"form-select mb-2\"\r\n          onChange={(e) => setSelectedColumn(e.target.value)}\r\n          value={selectedColumn}\r\n        >\r\n          <option value=\"\">-- Select Column --</option>\r\n          {editableColumns.map((col) => (\r\n            <option key={col} value={col}>\r\n              {col}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <label>Select Value:</label>\r\n        <select\r\n          className=\"form-select mb-2\"\r\n          value={selectedValue}\r\n          onChange={(e) => setSelectedValue(e.target.value)}\r\n          disabled={!selectedColumn}\r\n        >\r\n          <option value=\"\">-- Select Value --</option>\r\n          {valueOptions.map((val) => (\r\n            <option key={val} value={val}>\r\n              {val}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <button\r\n          className=\"btn btn-outline-success me-2 mb-2\"\r\n          onClick={() => handleApplyUpdate(false)}\r\n          disabled={!selectedRows.length}\r\n          style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n        >\r\n          Apply to Selected\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          onClick={() => handleApplyUpdate(true)}\r\n        >\r\n          Apply to All\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","import Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst BOSWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave) {\r\n      onSave();\r\n      // eslint-disable-next-line no-mixed-operators\r\n    } else if (\r\n      (type !== \"Document\" && !latestRevision) ||\r\n      latestRevision === droppedRevision\r\n    ) {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (\r\n      (type !== \"Document\" && !latestRevision) ||\r\n      latestRevision === droppedRevision\r\n    ) {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex cta-absolute\">\r\n      <button\r\n        className=\"btn btn-outline-success btn-lg m-2\"\r\n        onClick={handleSaveClick}\r\n      >\r\n        Save\r\n      </button>\r\n      <MassUpdateDropdown\r\n        editableColumns={[\r\n          \"Print On Purchase Order Required\",\r\n          \"Print On Work Order Required\",\r\n          \"Work Order Document Required\",\r\n          \"Print On report Order Required\",\r\n          \"SAP/JDE\",\r\n        ]}\r\n        selectedRows={selectedRows} // Selected row IDs from table\r\n        onApplyUpdate={handleMassUpdate} // Updated function with validation\r\n        valueOptions={[\"Yes\", \"No\"]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BOSWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./BOSWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./BOSdataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\nimport BOSWidgetToolbarNativeCta from \"./BOSWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst BOSWidget = () => {\r\n  const { initializeDroppableArea, loading } = useBOSDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"Table Data is:\", tableData);\r\n    setScreenLoader(true);\r\n    console.log(\"Type of Parent:\", type);\r\n    let parentData = [];\r\n    let ChildNameKey;\r\n    let ChildRevKey;\r\n    if (type === \"Document\") {\r\n      parentData = {\r\n        SpecName: droppedObjectData.cardData.Name,\r\n        SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n      };\r\n      ChildNameKey = \"ItemName\";\r\n      ChildRevKey = \"ItemRevision\";\r\n    } else {\r\n      console.log(\"It's a physical Product\");\r\n      parentData = {\r\n        ItemName: droppedObjectData.cardData.Name,\r\n        ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n      };\r\n      ChildNameKey = \"SpecName\";\r\n      ChildRevKey = \"SpecRevision\";\r\n    }\r\n\r\n    const formattedData = tableData.map((item) => {\r\n      // Find matching data in bosSpecDocument\r\n      let matchingData = bosSpecDocument.find(\r\n        (data) =>\r\n          data.childTitle === item.Title && data.childRevision === item.Revision\r\n      );\r\n\r\n      return {\r\n        [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n        [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n        ...parentData, // Merge Parent Data\r\n        PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n        PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n        WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n        PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n        \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      };\r\n    });\r\n\r\n    formattedData.sort((a, b) => {\r\n      if (a.SpecName !== b.SpecName) {\r\n        return a.SpecName.localeCompare(b.SpecName);\r\n      }\r\n      return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n    });\r\n\r\n    console.log(\"Formatted Data:\", formattedData);\r\n    const saveURL =\r\n      \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n    const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n    console.log(\"the response from node API is:\", response);\r\n    if (response.status === 200) {\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n      setSpecData(tableData);\r\n      setScreenLoader(false);\r\n    } else {\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n      setScreenLoader(false);\r\n    }\r\n  };\r\n\r\n  const handleMassUpdate = async (data, column, value) => {\r\n    console.log(\"Data when the Mass Update is Clicked:\", data);\r\n    console.log(\"Columns to Change:\", column);\r\n    console.log(\"Value after change:\", value);\r\n\r\n    const updatedData = data.map((row) => ({\r\n      ...row,\r\n      [column]: value, // Update the specified column with the new value\r\n    }));\r\n\r\n    console.log(\"Updated Data is:\", updatedData);\r\n    console.log(\"Table Data is:\", tableData);\r\n\r\n    // Merge updatedData into tableData based on matching Title & Revision\r\n    const mergedData = tableData.map((row) => {\r\n      const updatedRow = updatedData.find(\r\n        (updated) =>\r\n          updated.Title === row.Title && updated.Revision === row.Revision\r\n      );\r\n\r\n      return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n    });\r\n\r\n    console.log(\"Merged Data:\", mergedData);\r\n    updateTableData(mergedData);\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n  console.log(\"Bos data in BOS Widget is:\", bosData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData.specDocument\r\n  );\r\n  console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) =>\r\n          oldItem.Title === newItem.Title &&\r\n          oldItem.Revision === newItem.Revision\r\n      );\r\n\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      // Track changed cells\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true; // Mark this cell as changed\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  console.log(\"Table Data is:\", tableData);\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(\r\n    () => getTableData(bosSpecDocument, type),\r\n    [bosSpecDocument, type]\r\n  );\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Released Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n        <>\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <BOSWidgetToolbarNativeCta\r\n                  onSave={handleSave}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Released Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  selectedRows={selectedTableRows}\r\n                  state={state}\r\n                  tableData={tableData}\r\n                  onMassUpdate={handleMassUpdate}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  widgetType=\"Bos_Attribute_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default BOSWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (bosData, type) => {\r\n  if (!bosData) return [];\r\n\r\n  return bosData.map((data) => {\r\n    let rowData = {\r\n      Title: data?.childTitle || \"N/A\",\r\n      Revision: data?.childRevision || \"1\",\r\n      State: data?.childState || \"N/A\",\r\n      \"Print On Purchase Order Required\":\r\n        data.PrintOnPurchaseOrderRequired || \"No\",\r\n      \"Print On Work Order Required\": data.PrintOnWorkOrderRequired || \"No\",\r\n      \"Work Order Document Required\": data.WorkOrderDocumentRequired || \"No\",\r\n      \"Print On report Order Required\": data.PrintOnReportOrderRequired || \"No\",\r\n      \"SAP/JDE\": data[\"SAP/JDE\"] || \"No\",\r\n    };\r\n\r\n    // Add \"IsLatest\" key only if type === \"Document\"\r\n    if (type === \"Document\") {\r\n      rowData.IsLatest = data?.childLatest || \"FALSE\";\r\n    }\r\n\r\n    return rowData;\r\n  });\r\n};\r\n\r\nexport const tableColumns = (type, latestRevision, droppedRevision) => {\r\n  const baseColumns = [\r\n    { accessorKey: \"Title\", header: \"Title\" },\r\n    { accessorKey: \"Revision\", header: \"Revision\" },\r\n    { accessorKey: \"State\", header: \"State\" },\r\n  ];\r\n\r\n  if (type === \"Document\") {\r\n    baseColumns.push({ accessorKey: \"IsLatest\", header: \"Is Latest\" });\r\n  }\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ].map((columnKey) => ({\r\n    accessorKey: columnKey,\r\n    header: columnKey,\r\n    cell: ({ row, getValue, table }) => {\r\n      // Determine if the cell should be editable\r\n      const isEditable =\r\n        type === \"Document\"\r\n          ? row.original.IsLatest !== \"FALSE\" // Editable only if IsLatest is NOT \"FALSE\"\r\n          : !latestRevision || latestRevision === droppedRevision;\r\n\r\n      const handleDropdownChange = (e) => {\r\n        const updatedValue = e.target.value;\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id\r\n              ? { ...r.original, [columnKey]: updatedValue }\r\n              : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData);\r\n      };\r\n\r\n      return isEditable ? (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n          style={{\r\n            width: \"70%\",\r\n            padding: \"5px\",\r\n            fontSize: \"14px\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n          onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n        >\r\n          <option value=\"Yes\">Yes</option>\r\n          <option value=\"No\">No</option>\r\n        </select>\r\n      ) : (\r\n        <span>{getValue()}</span> // Show non-editable text if conditions fail\r\n      );\r\n    },\r\n  }));\r\n\r\n  return [...baseColumns, ...editableColumns];\r\n};\r\n\r\n// export const tableColumns = (type, latestRevision, droppedRevision) => [\r\n//   { accessorKey: \"Title\", header: \"Title\" },\r\n//   { accessorKey: \"Revision\", header: \"Revision\" },\r\n//   { accessorKey: \"State\", header: \"State\" },\r\n//   ...[\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ].map((columnKey) => ({\r\n//     accessorKey: columnKey,\r\n//     header: columnKey,\r\n//     cell: ({ row, getValue, table }) => {\r\n//       const handleDropdownChange = (e) => {\r\n//         const updatedValue = e.target.value;\r\n//         const updatedData = table\r\n//           .getRowModel()\r\n//           .rows.map((r) =>\r\n//             r.id === row.id\r\n//               ? { ...r.original, [columnKey]: updatedValue }\r\n//               : r.original\r\n//           );\r\n\r\n//         table.options.meta?.updateTableData(updatedData);\r\n//       };\r\n\r\n//       return (\r\n//         <select\r\n//           value={getValue()}\r\n//           onChange={handleDropdownChange}\r\n//           className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n//           style={{\r\n//             width: \"70%\",\r\n//             padding: \"5px\",\r\n//             fontSize: \"14px\",\r\n//             color: \"#333\",\r\n//             background: \"none\",\r\n//             border: \"none\",\r\n//             textAlign: \"left\",\r\n//           }}\r\n//           onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n//           onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n//         >\r\n//           <option value=\"Yes\">Yes</option>\r\n//           <option value=\"No\">No</option>\r\n//         </select>\r\n//       );\r\n//     },\r\n//   })),\r\n// ];\r\n\r\n// {\r\n//   accessorKey: \"MBom\",\r\n//   header: \"MBom\",\r\n//   cell: ({ row, getValue, table }) => {\r\n//     const handleDropdownChange = (e) => {\r\n//       if (!CAName) return; // Prevent changes when disabled\r\n//       const updatedValue = e.target.value;\r\n\r\n//       // Update the table data state here\r\n//       const updatedData = table\r\n//         .getRowModel()\r\n//         .rows.map((r) =>\r\n//           r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n//         );\r\n\r\n//       table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n//     };\r\n\r\n//     return (\r\n//       <select\r\n//         value={getValue()}\r\n//         onChange={handleDropdownChange}\r\n//         disabled={!CAName} // Disable dropdown if CAName is false\r\n//         className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n//         style={{\r\n//           ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n//           width: \"70%\",\r\n//           padding: \"5px\",\r\n//           fontSize: \"14px\",\r\n//           color: \"#333\",\r\n//           background: \"none\",\r\n//           border: \"none\",\r\n//           textAlign: \"left\",\r\n//         }}\r\n//         onMouseOver={(e) => {\r\n//           if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n//         }}\r\n//         onMouseOut={(e) => {\r\n//           if (CAName) e.target.style.border = \"none\";\r\n//         }}\r\n//       >\r\n//         <option value=\"Make\">Make</option>\r\n//         <option value=\"Buy\">Buy</option>\r\n//       </select>\r\n//     );\r\n//   },\r\n// },\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useBOSDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport BOSWidget from \"./BOSWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <BOSWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const fetchData = async (\r\n      url,\r\n      body = null,\r\n      method = \"GET\"\r\n      // headers = {}\r\n    ) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Method is:\");\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      try {\r\n        const response = await axios({\r\n          url,\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: body, // Include body only if provided\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(\"Request failed:\", error);\r\n        throw error; // Propagate the error to the caller\r\n      }\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        return !change;\r\n      }\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n\r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n\r\n      const patchUrl = `https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(patchUrl, updateBody, \"PATCH\");\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n\r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        declassifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","cell","_ref2","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","onClick","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","useBOSWidget","showErrorToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","REACT_APP_ENOVIA_BASE_URL","email","window","widget","getValue","log","handleBOSWidget","async","collabSpace","parentName","parentRevision","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","concat","parentDirection","urlObjWAF","ChildObject","callEnoviaWebService","status","output","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","sSpec","dataelements","trim","secondaryTitle","revision","stateNLS","name","revisionBody","child","body","identifier","source","relativePath","push","RevisionUrl","response","convertRevisionToNumber","rev","test","parseInt","number","i","charCodeAt","results","latestVersion","versions","reduce","latest","current","doc","some","version","_objectSpread","isLatestRevision","SpecName","SpecRevision","Items","obj","ItemName","ItemRevision","Specifications","fetchData","mergedData","spec","matchingDoc","find","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","setSpecDocument","error","useBOSDropableArea","loading","setLoading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","editableColumns","selectedRows","onApplyUpdate","valueOptions","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","e","target","value","col","disabled","val","cursor","onSave","tableData","onMassUpdate","latestRevision","droppedRevision","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","MassUpdateDropdown","handleMassUpdate","scope","BOSWidget","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","showSuccessToast","changedCells","selectedTableRows","useSelector","droppedObject","droppedObjectData","loadingParentDetails","proposedChanges","plantObjectData","isDropped","bosData","BOSObjectData","bosSpecDocument","specDocument","updateTableData","updatedData","newDataWithChanges","newItem","originalItem","oldItem","Title","Revision","Object","keys","key","prevKey","initialDraggedData","_droppedObjectData$in","_droppedObjectData$in2","items","newTableData","getTableData","rowData","State","IsLatest","Type","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","baseColumns","header","columnKey","_table$options$meta","updatedValue","r","options","meta","padding","fontSize","background","border","textAlign","onMouseOver","onMouseOut","Loader","handleHomeClick","setIsDropped","parentDetails","setPlantObjectData","allPlants","initialAssignedPlants","uniquePlants","productChildren","CardWithDragAndDrop","BOSWidgetToolbarNativeCta","ChildNameKey","ChildRevKey","parentData","formattedData","matchingData","sort","a","b","localeCompare","Number","MSG_SAVE_SUCCESS","MSG_SAVE_FAILURE","updatedRow","updated","ReusableTable","widgetType","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","line","includes","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","productId","AllClasses","productChilds","rowstoDelete","finalArray","WAFData","loadWAFData","fetchOOTBData","url","method","JSON","stringify","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","arguments","undefined","axios","NotPropagableChilds","filter","prodChild","toLowerCase","change","action","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","classes","childId","childs","Finalmessage","message","Array","isArray","every","childTitles","join","newClasses","errorItem","updateBody","MBOMName","propagateClasses","classifyUrl","classifybody","classifyResponse","_response$member$","nextApiUrl","cestamp","member","patchUrl","childclassifyResponse","declassifyUrl","declassifyResponse"],"sourceRoot":""}