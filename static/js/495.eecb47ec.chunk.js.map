{"version":3,"file":"static/js/495.eecb47ec.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","components/Loader/Loader.js","components/SearchInput/SearchInput.jsx","hooks/useDroppableArea.js","hooks/useInterComSearch.js","hooks/useRevisions.js","hooks/useToast.js","components/Confirmation.jsx","components/LoadingScreen.jsx","components/Dialog.jsx","hooks/useConfirmations.js","components/DropdownSelect.jsx","pages/index.jsx","slices/apis/types.js","WidgetLifecycle-munish.jsx","components/InitializeWidget.jsx","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/utils.ts","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/isRestoring.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts","../node_modules/@tanstack/react-query/src/useQuery.ts","components/DragAndDrop.jsx","pages/jdiBom/index.jsx","providers/index.jsx","services/api/refreshService.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = ({handleDrop}) => {\r\n  // const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\n\r\nconst useDroppableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  // const fetchObjectDetails = useCallback(\r\n  //   async (dataItems) => {\r\n  //     try {\r\n  //       const objectDetailsResult = await getDroppedObjectDetails({\r\n  //         dataItems,\r\n  //       });\r\n\r\n  //       console.warn(\r\n  //         \"objectDetailsResult....................\",\r\n  //         objectDetailsResult\r\n  //       );\r\n\r\n  //       if (objectDetailsResult.success) {\r\n  //         // Fetch Revisions and Parents in parallel\r\n  //         const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n  //         const [revisionParentData] = await Promise.all([\r\n  //           fetchRevisionsAndParents(\r\n  //             dataItems[0]?.objectId,\r\n  //             dataItems[0]?.objectType,\r\n  //             relativePath\r\n  //           ),\r\n  //         ]);\r\n  //         // Dispatch all updates together (batching updates)\r\n  //         dispatch(\r\n  //           setDroppedObjectData({\r\n  //             cardData: objectDetailsResult.data.cardData,\r\n  //             parentDetails: revisionParentData || [],\r\n  //           })\r\n  //         );\r\n  //         console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n  //       } else {\r\n  //         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n  //       }\r\n  //     } catch (error) {\r\n  //       console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n  //       showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n  //     } finally {\r\n  //       console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n  //       dispatch(setLoading(false));\r\n  //     }\r\n  //   },\r\n  //   [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  // );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          // await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [ showErrorToast]\r\n  );\r\n\r\n  // const { data: droppableContainer, isLoading } = useQuery({\r\n  //   queryKey: [\"droppableContainer\"],\r\n  //   queryFn: () =>\r\n  //     new Promise((resolve) => {\r\n  //       const interval = setInterval(() => {\r\n  //         const container = document.querySelector(\".droppable-container\");\r\n  //         if (container) {\r\n  //           clearInterval(interval);\r\n  //           resolve(container);\r\n  //         } else {\r\n  //           resolve(false);\r\n  //         }\r\n\r\n  //       }, 100); // check every 100ms\r\n  //     }),\r\n    // Disable refetching on window focus (optional)\r\n    // refetchOnWindowFocus: false,\r\n    // We want this query to run right away.\r\n    // enabled: true,\r\n\r\n    // Once the element is found, execute the initialization logic.\r\n    // onSuccess: (container) => {\r\n    //   // Only reset isDropped if it's not already true.\r\n    //   if (!isDropped) {\r\n    //     console.log(\r\n    //       \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n    //     );\r\n    //     dispatch(setIsDroppedAction(false));\r\n    //   } else {\r\n    //     console.log(\r\n    //       \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n    //     );\r\n    //   }\r\n    //   // Call your custom initialization function passing the container and other params.\r\n    //   initDroppable(container, handleDrop, dispatch, showErrorToast);\r\n    // },\r\n  // });\r\n\r\n\r\n  // console.log('droppableContainer.....................', droppableContainer)\r\n\r\n  // useQuery({\r\n  //   queryKey: [\"initdrop\"],\r\n  //   queryFn: () => {\r\n  //     // Only reset isDropped if it's not already true.\r\n  //     if (!isDropped) {\r\n  //       console.log(\r\n  //         \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n  //       );\r\n  //       dispatch(setIsDroppedAction(false));\r\n  //     } else {\r\n  //       console.log(\r\n  //         \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n  //       );\r\n  //     }\r\n  //     // Call your custom initialization function passing the container and other params.\r\n  //     initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n  //   },\r\n\r\n  //   enabled: !!droppableContainer,\r\n  // });\r\n\r\n  // // Initialize droppable area\r\n  // const initializeDroppableArea = useCallback(() => {\r\n  //   // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n  //   if (!isDropped) {\r\n  //     console.log(\r\n  //       \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n  //     );\r\n  //     dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n  //   } else {\r\n  //     console.log(\r\n  //       \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n  //     );\r\n  //   }\r\n\r\n  //   const interval = setInterval(() => {\r\n  //     const droppableContainer = document.querySelector(\".droppable-container\");\r\n  //     if (droppableContainer) {\r\n  //       clearInterval(interval);\r\n  //       initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n  //     }\r\n  //   }, 100); // Check every 100ms\r\n\r\n  //   return () => clearInterval(interval); // Cleanup interval on unmount\r\n  // }, [handleDrop, dispatch]);\r\n\r\n  //  const datas =  useQuery({\r\n  //   queryKey:[\"getObjects\"],\r\n  //   queryFn:initializeDroppableArea,\r\n\r\n  // })\r\n\r\n  // console.warn('vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv', datas)\r\n\r\n  // const hasInitializedDroppable = useRef(false);\r\n\r\n  // // // ✅ Memoized function to prevent re-creation\r\n  // const initDropp = useCallback(() => {\r\n  //   if (!hasInitializedDroppable.current) {\r\n  //     initializeDroppableArea();\r\n  //     hasInitializedDroppable.current = true;\r\n  //   }\r\n  // }, [initializeDroppableArea]);\r\n\r\n  // // // ✅ Use a single effect to optimize performance\r\n  // useEffect(() => {\r\n  //   initDropp();\r\n\r\n  //   console.info(\"[RevisionFloat] State Changes:\", { isDropped });\r\n  // }, [initDroppable, isDropped]);\r\n\r\n  return {\r\n    initializeDroppableArea:()=>{},\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import { Box, Chip, Stack, Typography } from \"@mui/material\";\n\n\nexport const ConfirmationScreen = ({\n  parentParts,\n  sourceOrg,\n  selectedItems,\n}) => {\n  return (\n    <>\n      {/* <Paper\n      sx={{\n        padding: 4,\n        width: \"100%\",\n        maxWidth: 600,\n        borderRadius: 4,\n        boxShadow: 3,\n        opacity: stage === \"assigning\" ? 0.6 : 1,\n      }}\n    >\n      <Stack spacing={3}>\n      <Typography\n      variant=\"h5\"\n      sx={{ fontWeight: \"bold\", textAlign: \"center\" }}\n      >\n      Confirm Your Submission\n        </Typography> */}\n\n      <Stack spacing={3}>\n        <Box>\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: \"medium\" }}>\n            Parent item(s) to Assign:\n          </Typography>\n          <Typography\n            variant=\"body1\"\n            sx={{ marginBottom: 2, whiteSpace: \"pre-line\" }}\n          >\n            {parentParts}\n          </Typography>\n        </Box>\n\n        <Box>\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: \"medium\" }}>\n            Source Organization:\n          </Typography>\n          <Typography variant=\"body1\" sx={{ marginBottom: 2 }}>\n            {sourceOrg}\n          </Typography>\n        </Box>\n\n        {/* <Box>\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: \"medium\" }}>\n            Destination JDI Orgs:\n          </Typography>\n          <Typography variant=\"body1\" sx={{ marginBottom: 2 }}>\n            {destOrg}\n          </Typography>\n        </Box> */}\n\n        <Box>\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: \"medium\" }}>\n            Items to be Processed:\n          </Typography>\n          {selectedItems.length > 0 ? (\n            <Box\n              sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 1, marginTop: 1 }}\n            >\n              {selectedItems.map((item) => (\n                <Chip key={item} label={item} color=\"primary\" />\n              ))}\n            </Box>\n          ) : (\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              No items selected.\n            </Typography>\n          )}\n        </Box>\n        {/* <Box>\n            <Typography variant=\"subtitle1\" sx={{ fontWeight: \"medium\" }}>\n              Mapped Items:\n            </Typography>\n            {selectedItems.length > 0 ? (\n              <Box\n                sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 1, marginTop: 1 }}l\n              >\n                {selectedItems.map((item) => (\n                  <Chip key={item} label={item} color=\"primary\" />\n                ))}\n              </Box>\n            ) : (\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                No items selected.\n              </Typography>\n            )}\n          </Box> */}\n        {/* <Stack direction=\"row\" spacing={2} justifyContent=\"flex-end\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onSubmit}\n            disabled={isLoading}\n          >\n            Confirm\n          </Button>\n\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={() => setIsOpen(false)}\n            disabled={isLoading}\n          >\n            Cancel\n          </Button>\n        </Stack> */}\n      </Stack>\n      {/* </Stack>\n    </Paper> */}\n    </>\n  );\n};\n","import { Box, LinearProgress, Paper, Typography } from \"@mui/material\";\n\nexport const LoadingScreen = ({ message }) => {\n  return (\n    <Paper\n      sx={{\n        padding: 4,\n        width: \"100%\",\n        maxWidth: 600,\n        borderRadius: 4,\n        boxShadow: 3,\n        textAlign: \"center\",\n        backgroundColor: \"#f5f5f5\",\n        border: \"2px solid #3f51b5\",\n      }}\n    >\n      <Box sx={{ marginBottom: 2 }}>\n        <Typography variant=\"h6\" color=\"primary\" fontWeight=\"bold\">\n          {message}\n        </Typography>\n      </Box>\n      <LinearProgress color=\"primary\" />\n    </Paper>\n  );\n};\n","import { Button, Stack, Typography } from \"@mui/material\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nimport { LoadingScreen } from \"./LoadingScreen\";\nimport {  useEffect, useRef } from \"react\";\n\nexport function Dialog({\n  children,\n  isOpen,\n  onSubmit,\n  onCancel,\n  disabled,\n  title,\n}) {\n  const dialogRef = useRef(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    function handleClickOutside(event) {\n      if (dialogRef.current && !dialogRef.current.contains(event.target)) {\n        onCancel();\n      }\n    }\n\n    if (isOpen) window.addEventListener(\"mousedown\", handleClickOutside, { signal });\n\n    return () => controller.abort();\n  }, [isOpen, onCancel]);\n\n  return (\n    <div className=\"flex justify-center items-center\">\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            className=\"fixed inset-0 flex items-center justify-center backdrop-blur-xs bg-black/30 z-10\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <motion.div\n              ref={dialogRef}\n              className=\"bg-white rounded-2xl p-6 shadow-xl min-w-[70%] md:min-w-[40%] max-w-[60%]\"\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.8, opacity: 0 }}\n            >\n              <Typography\n                variant=\"h5\"\n                sx={{ fontWeight: \"bold\", textAlign: \"center\" }}\n              >\n                {title}\n              </Typography>\n\n              {disabled && (\n                <div className=\"w-full flex justify-center py-4\">\n                  <LoadingScreen message=\"Searching for parts...\" />\n                </div>\n              )}\n\n              {children}\n\n              <Stack\n                direction=\"row\"\n                spacing={2}\n                justifyContent=\"flex-end\"\n                className=\"pt-4\"\n              >\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={onSubmit}\n                  disabled={disabled}\n                >\n                  Confirm\n                </Button>\n\n                <Button\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  onClick={onCancel}\n                  disabled={disabled}\n                >\n                  Cancel\n                </Button>\n              </Stack>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n","import { atom, useAtom } from \"jotai\";\n\nconst productAtom = atom(false);\n\nexport const useConfirmations = () => {\n  const [isOpen, setIsOpen] = useAtom(productAtom);\n\n  return {\n    isOpen,\n    setIsOpen,\n  };\n};\n","import {\n  Autocomplete,\n  TextField,\n  Chip,\n  Box,\n  Paper,\n  Typography,\n} from \"@mui/material\";\nimport { useOrgListQuery, useRdoListQuery } from \"../slices/apis/app.api\";\n\nexport const DropdownMultiSelect = ({\n  selectedItems,\n  onChange,\n  disabled,\n}) => {\n  const handleSelect = (newValue) => {\n    if (newValue && !selectedItems?.includes(newValue)) {\n      onChange([...selectedItems, newValue]);\n    }\n  };\n\n  const handleDelete = (itemToDelete) => {\n    onChange(selectedItems?.filter((item) => item !== itemToDelete));\n  };\n\n  const { data: rdoList } = useRdoListQuery({});\n  const { data: orgList } = useOrgListQuery({});\n\n  return (\n    <Box\n      sx={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", gap: 2 }}\n    >\n      <Autocomplete\n        options={rdoList?.data ?? []}\n        onChange={(_, newValue) => handleSelect(newValue )}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"RDO Name (will appear in Selected Plants)\"\n            fullWidth\n            variant=\"outlined\"\n            disabled={disabled}\n          />\n        )}\n      />\n      <Autocomplete\n        options={orgList?.data ?? []}\n        onChange={(_, newValue) => handleSelect(newValue )}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Destination JDI Orgs (will appear in Selected Plants)\"\n            fullWidth\n            variant=\"outlined\"\n            disabled={disabled}\n          />\n        )}\n      />\n\n      {/* Helper text indicating both selections will be shown */}\n      <Typography variant=\"caption\" color=\"textSecondary\">\n        Selections from both fields will appear below.\n      </Typography>\n\n      <Paper\n        sx={{\n          padding: 2,\n          borderRadius: 2,\n          boxShadow: 2,\n          maxHeight: 200,\n          overflowY: \"auto\",\n        }}\n      >\n        <Typography\n          variant=\"subtitle1\"\n          sx={{ fontWeight: \"bold\", marginBottom: 2 }}\n        >\n          Selected Plants\n        </Typography>\n\n        <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 1, minHeight: 20 }}>\n          {selectedItems.map((item) => (\n            <Chip\n              key={item}\n              label={item}\n              onDelete={() => handleDelete(item)}\n              color=\"primary\"\n            />\n          ))}\n        </Box>\n      </Paper>\n    </Box>\n  );\n};\n","import { useState } from \"react\";\nimport { TextField, Box, Paper, Button, Stack, Alert } from \"@mui/material\";\nimport { ConfirmationScreen } from \"../components/Confirmation\";\nimport { ResultsScreen } from \"../components/Result\";\nimport { Dialog } from \"../components/Dialog\";\nimport { useConfirmations } from \"../hooks/useConfirmations\";\nimport { usePostMutation } from \"../slices/apis/app.api\";\nimport toast from \"react-hot-toast\";\nimport { getErrorMessage } from \"../slices/apis/types\";\nimport { DropdownMultiSelect } from \"../components/DropdownSelect\";\n\nexport const JdiBomPage = () => {\n  // Form fields and error state\n  const [errors, setErrors] = useState({});\n\n  const [formState, setFormState] = useState({\n    parentParts: \"\",\n    sourceOrg: \"\",\n    plants: [],\n  });\n\n  const handleChange = (key, value) => {\n    setFormState((prev) => ({ ...prev, [key]: value }));\n  };\n\n  const { isOpen, setIsOpen } = useConfirmations();\n\n  // --- Form Submission ---\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    const newErrors = {};\n\n    if (!formState.parentParts.trim())\n      newErrors.parentParts = \"Parent Part is required\";\n    if (!formState.sourceOrg.trim())\n      newErrors.sourceOrg = \"Source org is required\";\n    if (!formState.plants.length)\n      newErrors.plants = \"Select either RDO Name or Destination JDI Org\";\n\n    setErrors(newErrors);\n\n    if (Object.keys(newErrors).length === 0) setIsOpen(true);\n  };\n\n  // --- Cancel Handler ---\n  const handleCancel = () => setIsOpen(false);\n\n  const [postMutation, { isLoading }] = usePostMutation();\n\n  // --- Confirmation Stage ---\n  const handleConfirmationSubmit = async () => {\n    const { data, error } = await postMutation({\n      parentPart: formState.parentParts,\n      sourceOrg: formState.sourceOrg,\n      plants: formState.plants,\n    });\n\n    if (error) toast.error(getErrorMessage(error));\n\n    setIsOpen(false);\n    toast.success(data.message);\n    // setTimeout(() => navigate(\"/tasks\"), 500);\n  };\n\n  return (\n    <Box sx={{ minHeight: \"calc(100vh - 65px)\", backgroundColor: \"#eef2f6\" }}>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Confirm Your Submission\"\n        onSubmit={handleConfirmationSubmit}\n        onCancel={handleCancel}\n        disabled={isLoading}\n      >\n        <ConfirmationScreen\n          parentParts={formState.parentParts}\n          sourceOrg={formState.sourceOrg}\n          selectedItems={formState.plants}\n        />\n      </Dialog>\n\n      <Box\n        sx={{\n          padding: 4,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          gap: 4,\n          minHeight: \"calc(100vh - 200px)\",\n        }}\n      >\n        <Paper\n          sx={{\n            padding: 4,\n            width: \"100%\",\n            maxWidth: 600,\n            borderRadius: 4,\n            boxShadow: 3,\n          }}\n        >\n          <form onSubmit={handleFormSubmit}>\n            <Stack spacing={3}>\n              <TextField\n                label=\"Parent item(s) to Assign\"\n                variant=\"outlined\"\n                value={formState.parentParts}\n                onChange={(e) => handleChange(\"parentParts\", e.target.value)}\n                error={!!errors.parentParts}\n                helperText={errors.parentParts}\n                fullWidth\n              />\n              <TextField\n                label=\"Source Organization\"\n                variant=\"outlined\"\n                value={formState.sourceOrg}\n                onChange={(e) => handleChange(\"sourceOrg\", e.target.value)}\n                error={!!errors.sourceOrg}\n                helperText={errors.sourceOrg}\n                fullWidth\n              />\n\n              <DropdownMultiSelect\n                selectedItems={formState.plants}\n                onChange={(newSelectedItems) =>\n                  handleChange(\"plants\", newSelectedItems)\n                }\n                disabled={false}\n              />\n\n              {errors.plants && <Alert severity=\"error\">{errors.plants}</Alert>}\n\n              <Stack direction=\"row\" spacing={2} justifyContent=\"flex-end\">\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                  Submit\n                </Button>\n\n                <Button\n                  type=\"button\"\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  onClick={handleCancel}\n                >\n                  Cancel\n                </Button>\n              </Stack>\n            </Stack>\n          </form>\n        </Paper>\n\n        {/* <LoadingScreen message=\"Assigning items and commoning required parts...\" /> */}\n\n        {/* Results Screen */}\n        {false && (\n          <ResultsScreen\n            parentParts={formState.parentParts}\n            sourceOrg={formState.sourceOrg}\n            selectedItems={formState.plants}\n            onBack={handleCancel}\n          />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default JdiBomPage;\n","/**\n * Extracts an error message from an RTK Query error response.\n *\n * @param error - The error object from an API call.\n * @returns The extracted error message or a default message.\n */\nexport function getErrorMessage(error) {\n  if (error && typeof error === \"object\" && \"data\" in error) {\n    const fetchError = error;\n\n    if (\n      typeof fetchError.data === \"object\" &&\n      fetchError.data !== null &&\n      \"message\" in fetchError.data\n    ) {\n      return fetchError.data.message;\n    }\n  }\n\n  if (typeof error === \"object\" && error !== null && \"message\" in error) {\n    console.error(error);\n    return error.message;\n  }\n\n  return \"An unexpected error occurred.\";\n}\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"./services/api/refreshService\";\r\nimport useToast from \"./hooks/useToast\";\r\nimport useDroppableArea from \"./hooks/useDroppableArea\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"./utils/toastMessages\";\r\nimport store from \"./store\"; // ✅ Import Redux store directly\r\nimport Loader from \"./components/Loader/Loader\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useDroppableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import { createRoot } from \"react-dom/client\";\nimport { Providers } from \"../providers\";\nimport WidgetLifecycle from \"../WidgetLifecycle-munish\";\n\n// Global React root reference\nlet root = null;\n\n/**\n * Mounts the React application dynamically.\n * @param {JSX.Element} AppComponent - The main component to render inside the app.\n * @returns {JSX.Element} - Returns the mounted component.\n */\nfunction start(AppComponent) {\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\n    window.PlatformAPI = PlatformAPI;\n  });\n\n  // Find the root element within the widget's body (if available)\n  const widget = window.widget;\n\n  let rootElement =\n    widget?.body?.querySelector(\"#root\") || document.getElementById(\"root\");\n\n  // If no root element exists, create one and append it to the widget body or document body.\n  if (!rootElement) {\n    rootElement = document.createElement(\"div\");\n    rootElement.id = \"root\";\n    (widget?.body || document.body).appendChild(rootElement);\n  }\n\n  root = root || createRoot(rootElement);\n  root.render(\n    <Providers>\n      <WidgetLifecycle />\n\n      {AppComponent}\n    </Providers>\n  );\n\n  return AppComponent;\n}\n\n// Function to inject the refresh listener script into the **parent window**\nfunction injectRefreshListener() {\n  const scriptContent = `\n      function listenForRefreshClicks() {\n        // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\n  \n        document.body.addEventListener(\"click\", function (event) {\n          let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\n  \n          if (refreshButton) {\n            // console.log(\"✅ [Parent] User clicked Refresh!\");\n            sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\n            // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\n          }\n        }, true);\n      }\n  \n      // ✅ Ensure event listener is added even if DOM is already loaded\n      if (document.readyState === \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\n      } else {\n        listenForRefreshClicks();\n      }\n    `;\n\n  // Inject script **into the parent window**\n  if (window.parent && window.parent.document) {\n    let injectedScript = window.parent.document.createElement(\"script\");\n    injectedScript.textContent = scriptContent;\n    window.parent.document.body.appendChild(injectedScript);\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\n  } else {\n    console.warn(\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\n    );\n  }\n}\n\n/**\n * Initializes the widget and returns the mounted component.\n * @param {JSX.Element} AppComponent - The main component to render inside the app.\n * @returns {JSX.Element} - Returns the mounted component.\n */\nexport function initializeWidget(AppComponent) {\n  // ✅ Inject the script when the React app starts\n  injectRefreshListener();\n\n  if (window.widget) {\n    let hasOnLoadRun = false;\n\n    window.widget.addEvent(\"onLoad\", () => {\n      if (hasOnLoadRun) {\n        console.warn(\n          \"⏳ onLoad was already executed. Ignoring duplicate trigger.\"\n        );\n        return;\n      }\n\n      hasOnLoadRun = true;\n      start(AppComponent);\n    });\n  } else {\n    console.error(\"❌ Widget not detected! onLoad cannot be registered.\");\n  }\n\n  return AppComponent;\n}\n","import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error('experimental_prefetchInRender feature flag is not enabled'),\n      )\n    }\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult()\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackProp(key as keyof QueryObserverResult)\n          onPropTracked?.(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Select data if needed\n    if (options.select && newState.data !== undefined) {\n      // Memoize select result\n      if (\n        prevResult &&\n        newState.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(newState.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = newState.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && placeholderData !== undefined) {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    this.#notify({ listeners: shouldNotifyListeners() })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: { listeners: boolean }): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (resolveEnabled(options.enabled, query) !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","function _objectDestructuringEmpty(t) {\n  if (null == t) throw new TypeError(\"Cannot destructure \" + t);\n}\nexport { _objectDestructuringEmpty as default };","'use client'\nimport * as React from 'react'\n\n// CONTEXT\nexport type QueryErrorResetFunction = () => void\nexport type QueryErrorIsResetFunction = () => boolean\nexport type QueryErrorClearResetFunction = () => void\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: QueryErrorClearResetFunction\n  isReset: QueryErrorIsResetFunction\n  reset: QueryErrorResetFunction\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport type QueryErrorResetBoundaryFunction = (\n  value: QueryErrorResetBoundaryValue,\n) => React.ReactNode\n\nexport interface QueryErrorResetBoundaryProps {\n  children: QueryErrorResetBoundaryFunction | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function' ? children(value) : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","export function shouldThrowError<T extends (...args: Array<any>) => boolean>(\n  throwError: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow throwError function to override throwing behavior on a per-error basis\n  if (typeof throwError === 'function') {\n    return throwError(...params)\n  }\n\n  return !!throwError\n}\n\nexport function noop(): void {}\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (\n    options.suspense ||\n    options.throwOnError ||\n    options.experimental_prefetchInRender\n  ) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n  suspense: boolean | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    ((suspense && result.data === undefined) ||\n      shouldThrowError(throwOnError, [result.error, query]))\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  const originalStaleTime = defaultedOptions.staleTime\n\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => Math.max(originalStaleTime(...args), 1000)\n        : Math.max(originalStaleTime ?? 1000, 1000)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1000)\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n","'use client'\nimport * as React from 'react'\n\nimport { isServer, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport { noop } from './utils'\nimport type {\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n): QueryObserverResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object',\n      )\n    }\n  }\n\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_beforeQuery?.(\n    defaultedOptions,\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`,\n      )\n    }\n  }\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureSuspenseTimers(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  // this needs to be invoked before creating the Observer because that can create a cache entry\n  const isNewCacheEntry = !client\n    .getQueryCache()\n    .get(defaultedOptions.queryHash)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions)\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: client\n        .getQueryCache()\n        .get<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >(defaultedOptions.queryHash),\n      suspense: defaultedOptions.suspense,\n    })\n  ) {\n    throw result.error\n  }\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_afterQuery?.(\n    defaultedOptions,\n    result,\n  )\n\n  if (\n    defaultedOptions.experimental_prefetchInRender &&\n    !isServer &&\n    willFetch(result, isRestoring)\n  ) {\n    const promise = isNewCacheEntry\n      ? // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n        fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n      : // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n        client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n\n    promise?.catch(noop).finally(() => {\n      // `.updateResult()` will trigger `.#currentThenable` to finalize\n      observer.updateResult()\n    })\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n","import React from \"react\";\r\nimport DragAndDropComponent from \"./DragAndDrop/DragAndDrop\";\r\nimport Loader from \"./Loader/Loader\";\r\nimport { useInitializeDroppableArea } from \"../hooks/useInitializeDropableArea\";\r\nimport useDroppableArea from \"../hooks/useDroppableArea\";\r\nimport useRevisions from \"src/hooks/useRevisions\";\r\n\r\nimport { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\n\r\nexport const WithDroppableLogic = ({ children, objectDropped }) => {\r\n  // const { loading } = useDroppableArea();\r\n\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const dataaa = useSelector((state) => state.droppedObject);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  console.info('dataaa.................', dataaa)\r\n\r\n  // const fetchObjectDetails = useCallback(\r\n  //   async (dataItems) => {\r\n  //     try {\r\n  //       const objectDetailsResult = await getDroppedObjectDetails({\r\n  //         dataItems,\r\n  //       });\r\n\r\n  //       console.warn(\r\n  //         \"objectDetailsResult....................\",\r\n  //         objectDetailsResult\r\n  //       );\r\n\r\n  //       if (objectDetailsResult.success) {\r\n  //         // Fetch Revisions and Parents in parallel\r\n  //         const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n  //         const [revisionParentData] = await Promise.all([\r\n  //           fetchRevisionsAndParents(\r\n  //             dataItems[0]?.objectId,\r\n  //             dataItems[0]?.objectType,\r\n  //             relativePath\r\n  //           ),\r\n  //         ]);\r\n  //         // Dispatch all updates together (batching updates)\r\n  //         dispatch(\r\n  //           setDroppedObjectData({\r\n  //             cardData: objectDetailsResult.data.cardData,\r\n  //             parentDetails: revisionParentData || [],\r\n  //           })\r\n  //         );\r\n  //         console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n  //       } else {\r\n  //         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n  //       }\r\n  //     } catch (error) {\r\n  //       console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n  //       showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n  //     } finally {\r\n  //       console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n  //       dispatch(setLoading(false));\r\n  //     }\r\n  //   },\r\n  //   [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  // );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          // await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [ showErrorToast]\r\n  );\r\n\r\n  const { data: droppableContainer, isLoading } = useQuery({\r\n    queryKey: [\"droppableContainer\"],\r\n    queryFn: () =>\r\n      new Promise((resolve) => {\r\n        const interval = setInterval(() => {\r\n          const container = document.querySelector(\".droppable-container\");\r\n          if (container) {\r\n            clearInterval(interval);\r\n            resolve(container);\r\n          } else {\r\n            resolve(false);\r\n          }\r\n        }, 100); // check every 100ms\r\n      }),\r\n    // Disable refetching on window focus (optional)\r\n    // refetchOnWindowFocus: false,\r\n    // We want this query to run right away.\r\n    // enabled: true,\r\n\r\n    // Once the element is found, execute the initialization logic.\r\n    // onSuccess: (container) => {\r\n    //   // Only reset isDropped if it's not already true.\r\n    //   if (!isDropped) {\r\n    //     console.log(\r\n    //       \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n    //     );\r\n    //     dispatch(setIsDroppedAction(false));\r\n    //   } else {\r\n    //     console.log(\r\n    //       \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n    //     );\r\n    //   }\r\n    //   // Call your custom initialization function passing the container and other params.\r\n    //   initDroppable(container, handleDrop, dispatch, showErrorToast);\r\n    // },\r\n  });\r\n\r\n  // console.log(\"droppableContainer.....................\", droppableContainer);\r\n\r\n const {isFetching}=  useQuery({\r\n    queryKey: [\"initdrop\"],\r\n    queryFn: async () => {\r\n      // Only reset isDropped if it's not already true.\r\n      if (!isDropped) {\r\n        console.log(\r\n          \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n        );\r\n        dispatch(setIsDroppedAction(false));\r\n      } else {\r\n        console.log(\r\n          \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n        );\r\n      }\r\n      // Call your custom initialization function passing the container and other params.\r\n      await initDroppable(\r\n        droppableContainer,\r\n        handleDrop,\r\n        dispatch,\r\n        showErrorToast\r\n      );\r\n    },\r\n\r\n    enabled: !!droppableContainer,\r\n  });\r\n\r\n  // useInitializeDroppableArea();\r\n\r\n  // Use Redux for isDropped\r\n\r\n  // Check if a dynamic loadingObject value is passed via props;\r\n  // if not, fallback to Redux.\r\n  const loadingObject = objectDropped;\r\n\r\n  // console.warn(\"loadingObject...............\", loadingObject);\r\n\r\n  // Show loading states\r\n  if (isFetching) {\r\n    return <Loader />;\r\n  }\r\n\r\n  // If not dropped, show drag-and-drop area\r\n  if (!isDropped) {\r\n    return <DragAndDropComponent handleDrop = {handleDrop} />;\r\n  }\r\n\r\n  // Render the wrapped component when isDropped = true\r\n  return children;\r\n};\r\n","import { initializeWidget } from \"src/components/InitializeWidget\";\nimport { JdiBomPage } from \"src/pages\";\nimport { useSelector } from \"react-redux\";\nimport { WithDroppableLogic } from \"src/components/DragAndDrop\";\n\nconst JDIWidget = () => {\n  const loadingParentDetails = useSelector(\n    (state) => state.droppedObject.loadingParentDetails\n  );\n\n\n    const dataaa = useSelector((state) => state.droppedObject);\n  \n    console.warn('dataaa.................', dataaa)\n\n  return <WithDroppableLogic objectDropped={loadingParentDetails}>\n    <JdiBomPage />\n  </WithDroppableLogic>;\n};\n\nconst JdiBomWidget = () => initializeWidget(<JDIWidget />);\n\nexport default JdiBomWidget;\n","import { Suspense } from \"react\";\n\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Provider } from \"react-redux\";\n\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { Toaster } from \"react-hot-toast\";\nimport { Bounce, ToastContainer } from \"react-toastify\";\nimport store from \"../store\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\nimport \"../index.css\";\nimport \"../App.css\";\nimport \"../styles/variables.css\";\n\nexport const Providers = ({ children }) => {\n  const queryClient = new QueryClient();\n\n  return (\n    <HelmetProvider>\n      <Provider store={store}>\n        <QueryClientProvider client={queryClient}>\n          <Suspense fallback={<h1>loading</h1>}>\n            <Toaster position=\"top-center\" reverseOrder={false} />\n            <ToastContainer\n              position={\"top-right\"}\n              autoClose={2000}\n              hideProgressBar={false}\n              closeOnClick={true}\n              pauseOnHover={false}\n              pauseOnFocusLoss={false}\n              draggable={true}\n              theme={\"light\"}\n              transition={Bounce}\n            />\n\n            {children}\n          </Suspense>\n        </QueryClientProvider>\n      </Provider>\n    </HelmetProvider>\n  );\n};\n","export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n"],"names":["_ref","handleDrop","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","Loader","disabled","setSearchText","useState","inputRef","useRef","FontAwesomeIcon","icon","faMagnifyingGlass","onClick","handleSearchIconClick","trim","InputGroup","Form","Control","type","ref","value","onChange","event","newSearchText","target","onKeyDown","key","placeholder","Button","variant","handleClearClick","current","focus","useDroppableArea","showErrorToast","useToast","fetchRevisionsAndParents","useRevisions","dispatch","useDispatch","useSelector","state","droppedObject","isDropped","initializeDroppableArea","loading","useCallback","async","log","dataItems","_dataItems$","includes","MSG_INVALID_OBJECT_TYPE","setIsDroppedAction","setLoading","setTimeout","error","MSG_UNEXPECTED_ERROR","socket","setSocket","InterCom","setInterCom","useEffect","interComInstance","loadInterCom","loadData","disconnect","searchOpts","onObjectsSelected","_window$widget","socketName","Date","toISOString","replace","newSocket","Socket","dispatchRetryInternal","subscribeServer","widgetId","window","widget","finalSearchOpts","_objectSpread","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","data","showSuccessToast","relativePath","response","api","post","status","Error","concat","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","MSG_REPLACE_SUCCESS","success","MSG_REPLACE_ERROR","message","showToast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","_objectWithoutProperties","_excluded","toast","options","arguments","undefined","showInfoToast","showWarningToast","ConfirmationScreen","parentParts","sourceOrg","selectedItems","Stack","spacing","Box","Typography","sx","fontWeight","marginBottom","whiteSpace","display","flexWrap","gap","marginTop","map","item","Chip","label","color","LoadingScreen","Paper","padding","maxWidth","borderRadius","boxShadow","textAlign","backgroundColor","border","LinearProgress","Dialog","isOpen","onSubmit","onCancel","dialogRef","controller","AbortController","signal","addEventListener","contains","abort","AnimatePresence","motion","div","initial","opacity","animate","exit","scale","direction","justifyContent","productAtom","atom","DropdownMultiSelect","_rdoList$data","_orgList$data","handleSelect","newValue","rdoList","useRdoListQuery","orgList","useOrgListQuery","flexDirection","Autocomplete","_","renderInput","params","TextField","fullWidth","maxHeight","overflowY","minHeight","onDelete","handleDelete","itemToDelete","filter","JdiBomPage","errors","setErrors","formState","setFormState","plants","handleChange","prev","setIsOpen","useConfirmations","useAtom","handleCancel","postMutation","isLoading","usePostMutation","parentPart","fetchError","getErrorMessage","alignItems","e","preventDefault","newErrors","Object","keys","helperText","newSelectedItems","Alert","severity","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","initializeWidget","AppComponent","parent","document","injectedScript","createElement","textContent","body","appendChild","injectRefreshListener","hasOnLoadRun","_widget$body","requirejs","PlatformAPI","rootElement","querySelector","getElementById","createRoot","render","Providers","start","QueryObserver","_client","WeakMap","_currentQuery","_currentQueryInitialState","_currentResult","_currentResultState","_currentResultOptions","_currentThenable","_selectError","_selectFn","_selectResult","_lastQueryWithDefinedData","_staleTimeoutId","_refetchIntervalId","_currentRefetchInterval","_trackedProps","_Class_brand","WeakSet","Subscribable","constructor","client","super","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","Set","_classPrivateFieldSet","this","pendingThenable","experimental_prefetchInRender","_classPrivateFieldGet","reject","bindMethods","setOptions","refetch","bind","onSubscribe","listeners","size","addObserver","shouldFetchOnMount","_assertClassBrand","_executeFetch","call","updateResult","_updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","_clearStaleTimeout","_clearRefetchInterval","removeObserver","prevOptions","prevQuery","defaultQueryOptions","enabled","resolveEnabled","_updateQuery","_defaulted","shallowEqualObjects","getQueryCache","notify","query","observer","mounted","shouldFetchOptionally","resolveStaleTime","staleTime","_updateStaleTimeout","nextRefetchInterval","_computeRefetchInterval","_updateRefetchInterval","getOptimisticResult","build","result","createResult","optimisticResult","getCurrentResult","shouldAssignObserverCurrentProperties","trackResult","onPropTracked","trackedResult","forEach","defineProperty","configurable","enumerable","get","trackProp","add","getCurrentQuery","assign","t","TypeError","_objectDestructuringEmpty","fetch","fetchOptimistic","defaultedOptions","then","fetchOptions","_fetchOptions$cancelR","cancelRefetch","prevResult","prevResultState","prevResultOptions","queryInitialState","newState","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","fetchState","fetchStatus","errorUpdatedAt","select","replaceData","selectError","placeholderData","_classPrivateFieldGet2","now","isFetching","isPending","isError","hasData","nextResult","isSuccess","isInitialLoading","dataUpdatedAt","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","isStale","promise","finalizeThenableIfPossible","thenable","resolve","recreateThenable","pending","prevThenable","queryHash","reason","_notify","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","throwOnError","typedKey","has","onQueryUpdate","catch","noop","isServer","isValidTimeout","timeout","timeUntilStale","_ref2","refetchInterval","nextInterval","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","notifyOptions","notifyManager","batch","listener","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","createValue","isReset","clearReset","reset","QueryErrorResetBoundaryContext","React","IsRestoringContext","Provider","errorResetBoundary","useBaseQuery","Observer","queryClient","_client$getDefaultOpt","_client$getDefaultOpt2","_client$getDefaultOpt3","_client$getDefaultOpt4","useQueryClient","isRestoring","getDefaultOptions","queries","_experimental_beforeQuery","originalStaleTime","Math","max","gcTime","ensureSuspenseTimers","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","isNewCacheEntry","shouldSubscribe","subscribed","onStoreChange","unsubscribe","subscribe","batchCalls","shouldSuspend","throwError","getHasError","_experimental_afterQuery","willFetch","_client$getQueryCache","finally","useQuery","WithDroppableLogic","objectDropped","dataaa","info","droppableContainer","queryKey","queryFn","Promise","interval","container","initDroppable","DragAndDropComponent","JDIWidget","loadingParentDetails","JdiBomWidget","QueryClient","HelmetProvider","QueryClientProvider","Suspense","fallback","Toaster","reverseOrder","ToastContainer"],"sourceRoot":""}